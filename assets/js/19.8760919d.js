(window.webpackJsonp=window.webpackJsonp||[]).push([[19],{203:function(t,a,s){"use strict";s.r(a);var n=s(0),r=Object(n.a)({},function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"📄es5常用语法（简）"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#📄es5常用语法（简）","aria-hidden":"true"}},[t._v("#")]),t._v(" 📄ES5常用语法（简）")]),t._v(" "),s("p",[t._v("标准版本 ECMAScript 5.1  就是我们常说的ES5。 不过后来ECMAScript 标准版本的命名从版本号命名改为了根据发布年号命名。 这就很尴尬了， 如果按照这个命名， 🤣emmmm介个嘛， 应该称呼为啊哈哈哈哈哈哈🙃 。")]),t._v(" "),s("p",[t._v("虽然 ECMAScript 5.1 已经年纪很大啦， 但是对于刚刚接触前端的入门选手来讲， 还是要学习一下ES5的。 "),s("code",[t._v("ES5.1虽然已不复昔日芳华,但好歹风韵犹存嘛😀")])]),t._v(" "),s("h2",{attrs:{id:"变量"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#变量","aria-hidden":"true"}},[t._v("#")]),t._v(" 变量")]),t._v(" "),s("h3",{attrs:{id:"变量声明-var"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#变量声明-var","aria-hidden":"true"}},[t._v("#")]),t._v(" 变量声明 var")]),t._v(" "),s("h3",{attrs:{id:"变量提升"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#变量提升","aria-hidden":"true"}},[t._v("#")]),t._v(" 变量提升")]),t._v(" "),s("h2",{attrs:{id:"函数function"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#函数function","aria-hidden":"true"}},[t._v("#")]),t._v(" 函数Function")]),t._v(" "),s("h3",{attrs:{id:"函数提升"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#函数提升","aria-hidden":"true"}},[t._v("#")]),t._v(" 函数提升")]),t._v(" "),s("h3",{attrs:{id:"立即执行函数的几种写法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#立即执行函数的几种写法","aria-hidden":"true"}},[t._v("#")]),t._v(" 立即执行函数的几种写法")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 方法1")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    console"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'to do somthing'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 方法2")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    console"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'to do somthing'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//方法3")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    console"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'to do somthing'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("blockquote",[s("p",[t._v("我们可以利用一元运算符 ! + - ~ 可以对一些值做一些运算， 如+1, -1, 而我们的匿名函数fn(){}()也能被看作一个值。 那么一元运算符会对这个匿名函数先进行求值（求值的过程就是执行函数内的代码）, 然后再对结果进行运算（这个是副作用， 但是立即执行函数一般都不会要要到返回值， 所以不影响）。")])])])},[],!1,null,null,null);a.default=r.exports}}]);