(window.webpackJsonp=window.webpackJsonp||[]).push([[22],{200:function(v,_,t){"use strict";t.r(_);var e=t(0),o=Object(e.a)({},function(){var v=this,_=v.$createElement,t=v._self._c||_;return t("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[t("h1",{attrs:{id:"📄regexp-正则表达式）"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#📄regexp-正则表达式）","aria-hidden":"true"}},[v._v("#")]),v._v(" 📄RegExp(正则表达式）")]),v._v(" "),t("p",[v._v("正则表达式是一种模式， 用以描述某种类型的内容， 通常用来筛选字符串， 它的缩写是RegExp")]),v._v(" "),t("h2",{attrs:{id:"创建正则表达式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#创建正则表达式","aria-hidden":"true"}},[v._v("#")]),v._v(" 创建正则表达式")]),v._v(" "),t("h3",{attrs:{id:"构造函数"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#构造函数","aria-hidden":"true"}},[v._v("#")]),v._v(" 构造函数")]),v._v(" "),t("p",[v._v("使用new关键词创建一个正则对象")]),v._v(" "),t("div",{staticClass:"tip custom-block"},[t("p",{staticClass:"custom-block-title"},[v._v("提醒")]),v._v(" "),t("p",[v._v("构造函数的方式， 我们的pattern(正则表达式文本）部分是可以写一个变量的。 但是字面量的方式创建的正则表达式中我们是无法使用变量的。")])]),v._v(" "),t("div",{staticClass:"language-js extra-class"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[v._v("// new RegExp(pattern, [, flag]); ")]),v._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[v._v("//")]),v._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[v._v("var")]),v._v(" regx "),t("span",{pre:!0,attrs:{class:"token operator"}},[v._v("=")]),v._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[v._v("new")]),v._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[v._v("RegExp")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("(")]),v._v("pattern"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(",")]),v._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("[")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(",")]),v._v(" flag"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("]")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(";")]),v._v("\n\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[v._v("var")]),v._v(" regx "),t("span",{pre:!0,attrs:{class:"token operator"}},[v._v("=")]),v._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[v._v("new")]),v._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[v._v("RegExp")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[v._v("'abc'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(";")]),v._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[v._v("//匹配字符串 'abc' , 匹配一次")]),v._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[v._v("var")]),v._v(" regx "),t("span",{pre:!0,attrs:{class:"token operator"}},[v._v("=")]),v._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[v._v("new")]),v._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[v._v("RegExp")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[v._v("'abc'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(",")]),v._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[v._v("'g'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(";")]),v._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[v._v("//匹配字符串 'abc', g代表全局， 匹配所有")]),v._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[v._v("//在正则中使用变量， 以应对一些特殊的情况")]),v._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("{")]),v._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[v._v("// 以下写法和 ` var regx = new RegExp('abc', 'g');` 效果相同。 ")]),v._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[v._v("//但是此处使用了变量的方式传递了正则表式文本和匹配方式。 ")]),v._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[v._v("var")]),v._v(" pattern "),t("span",{pre:!0,attrs:{class:"token operator"}},[v._v("=")]),v._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[v._v("'abc'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(";")]),v._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[v._v("var")]),v._v(" flag "),t("span",{pre:!0,attrs:{class:"token operator"}},[v._v("=")]),v._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[v._v("'g'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(";")]),v._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[v._v("var")]),v._v(" regx "),t("span",{pre:!0,attrs:{class:"token operator"}},[v._v("=")]),v._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[v._v("new")]),v._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[v._v("RegExp")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("(")]),v._v("patter"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(",")]),v._v(" flag"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(";")]),v._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("}")]),v._v("\n")])])]),t("h3",{attrs:{id:"字面量"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#字面量","aria-hidden":"true"}},[v._v("#")]),v._v(" 字面量")]),v._v(" "),t("div",{staticClass:"warning custom-block"},[t("p",{staticClass:"custom-block-title"},[v._v("警告")]),v._v(" "),t("p",[v._v("使用字面量的方式创建一个正则表达式的时候， "),t("code",[v._v("/ /")]),v._v(" 符号内的正则表达式文本， 不需要使用 "),t("code",[v._v('" "')]),v._v(" 引号包裹 ; 且此处的正则表达式文本无法使用变量")])]),v._v(" "),t("div",{staticClass:"language-js extra-class"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[v._v("// 此处的正则表达式文本 pattern 就无法使用变量")]),v._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[v._v("var")]),v._v(" regx "),t("span",{pre:!0,attrs:{class:"token operator"}},[v._v("=")]),v._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[v._v("/")]),v._v("pattern"),t("span",{pre:!0,attrs:{class:"token operator"}},[v._v("/")]),v._v("flag"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(";")]),v._v("\n\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[v._v("var")]),v._v(" regx "),t("span",{pre:!0,attrs:{class:"token operator"}},[v._v("=")]),v._v(" "),t("span",{pre:!0,attrs:{class:"token regex"}},[v._v("/abc/")]),v._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[v._v("//其等同于 ==> var regx = new RegExp('abc'); ")]),v._v("\n\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[v._v("var")]),v._v(" regx "),t("span",{pre:!0,attrs:{class:"token operator"}},[v._v("=")]),v._v(" "),t("span",{pre:!0,attrs:{class:"token regex"}},[v._v("/abc/g")]),v._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[v._v("//其等同于 ==> regx = new RegExp('abc', 'g');")]),v._v("\n")])])]),t("h2",{attrs:{id:"正则表达式语法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#正则表达式语法","aria-hidden":"true"}},[v._v("#")]),v._v(" 正则表达式语法")]),v._v(" "),t("table",[t("thead",[t("tr",[t("th",[v._v("字符")]),v._v(" "),t("th",[v._v("描述")]),v._v(" "),t("th",[v._v("其他")])])]),v._v(" "),t("tbody",[t("tr",[t("td",[t("code",[v._v("\\")])]),v._v(" "),t("td",[v._v("将下一个字符标记为一个特殊字符、 或一个原义字符、 或一个向后引用、 或一个八进制转义符。")]),v._v(" "),t("td",[v._v("例如， "),t("code",[v._v("n")]),v._v(" 匹配字符 "),t("code",[v._v("n")]),v._v(" 。 "),t("code",[v._v("\\n")]),v._v(" 匹配一个换行符。 串行 "),t("code",[v._v("\\\\")]),v._v(" 匹配 "),t("code",[v._v("\\")]),v._v(" 而 "),t("code",[v._v("\\(")]),v._v(" 则匹配 "),t("code",[v._v("(")]),v._v(" 。")])]),v._v(" "),t("tr",[t("td",[t("code",[v._v("^")])]),v._v(" "),t("td",[v._v("匹配输入字符串的开始位置。")]),v._v(" "),t("td",[v._v("如果设置了 "),t("code",[v._v("RegExp")]),v._v(" 对象的Multiline属性， "),t("code",[v._v("^")]),v._v(" 也匹配 "),t("code",[v._v("\\n")]),v._v(" 或 "),t("code",[v._v("\\r")]),v._v(" 之后的位置。")])]),v._v(" "),t("tr",[t("td",[t("code",[v._v("$")])]),v._v(" "),t("td",[v._v("匹配输入字符串的结束位置")]),v._v(" "),t("td",[v._v("如果设置了 "),t("code",[v._v("RegExp")]),v._v(" 对象的Multiline属性， "),t("code",[v._v("$")]),v._v(" 也匹配 "),t("code",[v._v("\\n")]),v._v(" 或 "),t("code",[v._v("\\r")]),v._v(" 之前的位置。")])]),v._v(" "),t("tr",[t("td",[t("code",[v._v("*")])]),v._v(" "),t("td",[v._v("匹配前面的子表达式零次或多次。")]),v._v(" "),t("td",[v._v("例如， "),t("code",[v._v("zo*")]),v._v(" 能匹配 "),t("code",[v._v("z")]),v._v(" 以及 "),t("code",[v._v("zoo")]),v._v(" 。 "),t("code",[v._v("*")]),v._v(" 等价于 "),t("code",[v._v("{0, }")]),v._v(" 。")])]),v._v(" "),t("tr",[t("td",[t("code",[v._v("+")])]),v._v(" "),t("td",[v._v("匹配前面的子表达式一次或多次。")]),v._v(" "),t("td",[v._v("例如， "),t("code",[v._v("zo+")]),v._v(" 能匹配 "),t("code",[v._v("zo")]),v._v(" 以及 "),t("code",[v._v("zoo")]),v._v(" ， 但不能匹配 "),t("code",[v._v("z")]),v._v(" 。 +等价于 "),t("code",[v._v("{1, }")]),v._v(" 。")])]),v._v(" "),t("tr",[t("td",[t("code",[v._v("?")])]),v._v(" "),t("td",[v._v("匹配前面的子表达式零次或一次。")]),v._v(" "),t("td",[v._v("例如， "),t("code",[v._v("do(es)?")]),v._v(" 可以匹配 "),t("code",[v._v("does")]),v._v(" 或 "),t("code",[v._v("does")]),v._v(" 中的 "),t("code",[v._v("do")]),v._v(" 。 "),t("code",[v._v("?")]),v._v(" 等价于 "),t("code",[v._v("{0, 1}")]),v._v(" 。")])]),v._v(" "),t("tr",[t("td",[t("code",[v._v("{n}")])]),v._v(" "),t("td",[t("code",[v._v("n")]),v._v(" 是一个非负整数。 匹配确定的n次。")]),v._v(" "),t("td",[v._v("例如， "),t("code",[v._v("o{2}")]),v._v(" 不能匹配 "),t("code",[v._v("Bob")]),v._v(" 中的 "),t("code",[v._v("o")]),v._v(" ， 但是能匹配 "),t("code",[v._v("food")]),v._v(" 中的两个o.")])]),v._v(" "),t("tr",[t("td",[t("code",[v._v("{n,}")])]),v._v(" "),t("td",[t("code",[v._v("n")]),v._v(" 是一个非负整数。 至少匹配 "),t("code",[v._v("n")]),v._v(" 次。")]),v._v(" "),t("td",[v._v("例如， "),t("code",[v._v("o{2, }")]),v._v(" 不能匹配 "),t("code",[v._v("Bob")]),v._v(" 中的 "),t("code",[v._v("o")]),v._v(" ， 但能匹配 "),t("code",[v._v("foooood")]),v._v(" 中的所有 "),t("code",[v._v("o")]),v._v(" ; "),t("code",[v._v("o{1, }")]),v._v(" 等价于 "),t("code",[v._v("o+")]),v._v(" 。 "),t("code",[v._v("o{0, }")]),v._v(" 则等价于 "),t("code",[v._v("o*")]),v._v(" 。")])]),v._v(" "),t("tr",[t("td",[t("code",[v._v("{n,m}")])]),v._v(" "),t("td",[t("code",[v._v("m")]),v._v(" 和 "),t("code",[v._v("n")]),v._v(" 均为非负整数， 其中 "),t("code",[v._v("n<=m")]),v._v(" . 最少匹配 "),t("code",[v._v("n")]),v._v(" 次且最多匹配 "),t("code",[v._v("m")]),v._v(" 次。")]),v._v(" "),t("td",[v._v("例如， "),t("code",[v._v("o{1, 3}")]),v._v(" 将匹配 "),t("code",[v._v("fooooood")]),v._v(" 中的前三个 "),t("code",[v._v("o")]),v._v(" . "),t("code",[v._v("o{0, 1}")]),v._v(" 等价于 "),t("code",[v._v("o?")]),v._v(" 。 请注意在逗号和两个数之间不能有空格。")])]),v._v(" "),t("tr",[t("td",[t("code",[v._v("?")])]),v._v(" "),t("td",[v._v("当该字符紧跟在任何一个其他限制符 "),t("code",[v._v("(*, +, ?, {n}, {n, }, {n, m})")]),v._v(" 后面时， 匹配模式是非贪婪的。 非贪婪模式尽可能少的匹配所搜索的字符串， 而默认的贪婪模式则尽可能多的匹配所搜索的字符串。")]),v._v(" "),t("td",[v._v("例如， 对于字符串 "),t("code",[v._v("oooo")]),v._v(" ， "),t("code",[v._v("o+?")]),v._v(" 将匹配单个 "),t("code",[v._v("o")]),v._v(" ， 而 "),t("code",[v._v("o+")]),v._v(" 将匹配所有 "),t("code",[v._v("o")]),v._v(" 。")])]),v._v(" "),t("tr",[t("td",[t("code",[v._v(".")])]),v._v(" "),t("td",[v._v("匹配除 "),t("code",[v._v("\\n")]),v._v(" 之外的任何单个字符。")]),v._v(" "),t("td",[v._v("要匹配包括 "),t("code",[v._v("\\n")]),v._v(" 在内的任何字符， 请使用像 "),t("code",[v._v("(.|\\n)")]),v._v(" 的模式。")])]),v._v(" "),t("tr",[t("td",[t("code",[v._v("(pattern)")])]),v._v(" "),t("td",[v._v("匹配 "),t("code",[v._v("pattern")]),v._v(" 并获取这一匹配")]),v._v(" "),t("td",[v._v("所获取的匹配可以从产生的 "),t("code",[v._v("Matches")]),v._v(" 集合得到， 在 "),t("code",[v._v("VBScript")]),v._v(" 中使用 "),t("code",[v._v("SubMatches")]),v._v(" 集合， 在 "),t("code",[v._v("JScript")]),v._v(" 中则使用 "),t("code",[v._v("$0…$9")]),v._v(" 属性。 要匹配圆括号字符， 请使用 "),t("code",[v._v("\\(")]),v._v(" 或 "),t("code",[v._v("\\)")]),v._v(" 。")])]),v._v(" "),t("tr",[t("td",[t("code",[v._v("(?:pattern)")])]),v._v(" "),t("td",[v._v("匹配 "),t("code",[v._v("pattern")]),v._v(" 但不获取匹配结果， 也就是说这是一个非获取匹配， 不进行存储供以后使用。 这在使用或字符 "),t("code",[v._v("(|)")]),v._v(" 来组合一个模式的各个部分是很有用。")]),v._v(" "),t("td",[v._v("例如 "),t("code",[v._v("industr(?:y|ies)")]),v._v(" 就是一个比 "),t("code",[v._v("industry|industries")]),v._v(" 更简略的表达式。")])]),v._v(" "),t("tr",[t("td",[t("code",[v._v("(?=pattern)")])]),v._v(" "),t("td",[v._v("正向肯定预查， 在任何匹配 "),t("code",[v._v("pattern")]),v._v(" 的字符串开始处匹配查找字符串。 这是一个非获取匹配， 也就是说， 该匹配不需要获取供以后使用。")]),v._v(" "),t("td",[v._v("例如， "),t("code",[v._v("Windows(?=95|98|NT|2000)")]),v._v(" 能匹配 "),t("code",[v._v("Windows2000")]),v._v(" 中的 "),t("code",[v._v("Windows")]),v._v(" ， 但不能匹配 "),t("code",[v._v("Windows3.1")]),v._v(" 中的 "),t("code",[v._v("Windows")]),v._v(" 。 预查不消耗字符， 也就是说， 在一个匹配发生后， 在最后一次匹配之后立即开始下一次匹配的搜索， 而不是从包含预查的字符之后开始。")])]),v._v(" "),t("tr",[t("td",[t("code",[v._v("(?!pattern)")])]),v._v(" "),t("td",[v._v("正向否定预查， 在任何不匹配pattern的字符串开始处匹配查找字符串。 这是一个非获取匹配， 也就是说， 该匹配不需要获取供以后使用。")]),v._v(" "),t("td",[v._v("例如 "),t("code",[v._v("Windows(?!95|98|NT|2000)")]),v._v(" 能匹配 "),t("code",[v._v("Windows3.1")]),v._v(" 中的 "),t("code",[v._v("Windows")]),v._v(" ， 但不能匹配 "),t("code",[v._v("Windows2000")]),v._v(" 中的 "),t("code",[v._v("Windows")]),v._v(" 。 预查不消耗字符， 也就是说， 在一个匹配发生后， 在最后一次匹配之后立即开始下一次匹配的搜索， 而不是从包含预查的字符之后开始")])]),v._v(" "),t("tr",[t("td",[t("code",[v._v("(?<=pattern)")])]),v._v(" "),t("td",[v._v("反向肯定预查， 与正向肯定预查类拟， 只是方向相反。")]),v._v(" "),t("td",[v._v("例如， "),t("code",[v._v("(?<=95|98|NT|2000)Windows")]),v._v(" 能匹配 "),t("code",[v._v("2000Windows")]),v._v(" 中的 "),t("code",[v._v("Windows")]),v._v(" ， 但不能匹配 "),t("code",[v._v("3.1Windows")]),v._v(" 中的 "),t("code",[v._v("Windows")]),v._v(" 。")])]),v._v(" "),t("tr",[t("td",[t("code",[v._v("(?<!pattern)")])]),v._v(" "),t("td",[v._v("反向否定预查， 与正向否定预查类拟， 只是方向相反。")]),v._v(" "),t("td",[v._v("例如 "),t("code",[v._v("(?<!95|98|NT|2000)Windows")]),v._v(" 能匹配 "),t("code",[v._v("3.1Windows")]),v._v(" 中的 "),t("code",[v._v("Windows")]),v._v(" ， 但不能匹配 "),t("code",[v._v("2000Windows")]),v._v(" 中的 "),t("code",[v._v("Windows")]),v._v(" 。")])]),v._v(" "),t("tr",[t("td",[t("code",[v._v("x|y")])]),v._v(" "),t("td",[v._v("匹配 "),t("code",[v._v("x")]),v._v(" 或 "),t("code",[v._v("y")]),v._v(" .")]),v._v(" "),t("td",[v._v("例如， "),t("code",[v._v("z|food")]),v._v(" 能匹配 "),t("code",[v._v("z")]),v._v(" 或 "),t("code",[v._v("food")]),v._v(" 。 "),t("code",[v._v("(z|f)ood")]),v._v(" 则匹配 "),t("code",[v._v("zood")]),v._v(" 或 "),t("code",[v._v("food")]),v._v(" 。")])]),v._v(" "),t("tr",[t("td",[t("code",[v._v("[xyz]")])]),v._v(" "),t("td",[v._v("字符集合。 匹配所包含的任意一个字符。")]),v._v(" "),t("td",[v._v("例如， "),t("code",[v._v("[abc]")]),v._v(" 可以匹配 "),t("code",[v._v("plain")]),v._v(" 中的 "),t("code",[v._v("a")]),v._v(" 。")])]),v._v(" "),t("tr",[t("td",[t("code",[v._v("[^xyz]")])]),v._v(" "),t("td",[v._v("负值字符集合。 匹配未包含的任意字符。")]),v._v(" "),t("td",[v._v("例如， "),t("code",[v._v("[^abc]")]),v._v(" 可以匹配 "),t("code",[v._v("plain")]),v._v(" 中的 "),t("code",[v._v("p")]),v._v(" 。")])]),v._v(" "),t("tr",[t("td",[t("code",[v._v("[a-z]")])]),v._v(" "),t("td",[v._v("字符范围。 匹配指定范围内的任意字符。")]),v._v(" "),t("td",[v._v("例如， "),t("code",[v._v("[a-z]")]),v._v(" 可以匹配 "),t("code",[v._v("a")]),v._v(" 到 "),t("code",[v._v("z")]),v._v(" 范围内的任意小写字母字符。")])]),v._v(" "),t("tr",[t("td",[t("code",[v._v("[^a-z]")])]),v._v(" "),t("td",[v._v("负值字符范围。 匹配任何不在指定范围内的任意字符。")]),v._v(" "),t("td",[v._v("例如， "),t("code",[v._v("[^a-z]")]),v._v(" 可以匹配任何不在 "),t("code",[v._v("a")]),v._v(" 到 "),t("code",[v._v("z")]),v._v(" 范围内的任意字符。")])]),v._v(" "),t("tr",[t("td",[t("code",[v._v("\\b")])]),v._v(" "),t("td",[v._v("匹配一个单词边界， 也就是指单词和空格间的位置。")]),v._v(" "),t("td",[v._v("例如， "),t("code",[v._v("er\\b")]),v._v(" 可以匹配 "),t("code",[v._v("never")]),v._v(" 中的 "),t("code",[v._v("er")]),v._v(" ， 但不能匹配 "),t("code",[v._v("verb")]),v._v(" 中的 "),t("code",[v._v("er")]),v._v(" 。")])]),v._v(" "),t("tr",[t("td",[t("code",[v._v("\\B")])]),v._v(" "),t("td",[v._v("匹配非单词边界。")]),v._v(" "),t("td",[v._v("例如， "),t("code",[v._v("er\\B")]),v._v(" 能匹配 "),t("code",[v._v("verb")]),v._v(" 中的 "),t("code",[v._v("er")]),v._v(" ， 但不能匹配 "),t("code",[v._v("never")]),v._v(" 中的 "),t("code",[v._v("er")]),v._v(" 。")])]),v._v(" "),t("tr",[t("td",[t("code",[v._v("\\cx")])]),v._v(" "),t("td",[v._v("匹配由x指明的控制字符。")]),v._v(" "),t("td",[v._v("例如， "),t("code",[v._v("\\cM")]),v._v(" 匹配一个 "),t("code",[v._v("Control-M")]),v._v(" 或 "),t("code",[v._v("回车符")]),v._v(" 。 "),t("code",[v._v("x")]),v._v(" 的值必须为 "),t("code",[v._v("A-Z")]),v._v(" 或 "),t("code",[v._v("a-z")]),v._v(" 之一。 否则， 将 "),t("code",[v._v("c")]),v._v(" 视为一个原义的 "),t("code",[v._v("c")]),v._v(" 字符。")])]),v._v(" "),t("tr",[t("td",[t("code",[v._v("\\d")])]),v._v(" "),t("td",[v._v("匹配一个数字字符。 。")]),v._v(" "),t("td",[v._v("等价于[0-9]")])]),v._v(" "),t("tr",[t("td",[t("code",[v._v("\\D")])]),v._v(" "),t("td",[v._v("匹配一个非数字字符。")]),v._v(" "),t("td",[v._v("等价于[^0-9]。")])]),v._v(" "),t("tr",[t("td",[t("code",[v._v("\\f")])]),v._v(" "),t("td",[v._v("匹配一个换页符。")]),v._v(" "),t("td",[v._v("等价于 "),t("code",[v._v("\\x0c")]),v._v(" 和 "),t("code",[v._v("\\cL")]),v._v(" .")])]),v._v(" "),t("tr",[t("td",[t("code",[v._v("\\n")])]),v._v(" "),t("td",[v._v("匹配一个换行符。")]),v._v(" "),t("td",[v._v("等价于 "),t("code",[v._v("\\x0a")]),v._v(" 和 "),t("code",[v._v("\\cJ")]),v._v(" .")])]),v._v(" "),t("tr",[t("td",[t("code",[v._v("\\r")])]),v._v(" "),t("td",[v._v("匹配一个回车符。")]),v._v(" "),t("td",[v._v("等价于 "),t("code",[v._v("\\x0d")]),v._v(" 和 "),t("code",[v._v("\\cM")]),v._v(" .")])]),v._v(" "),t("tr",[t("td",[t("code",[v._v("\\s")])]),v._v(" "),t("td",[v._v("匹配任何空白字符， 包括空格、 制表符、 换页符等等。")]),v._v(" "),t("td",[v._v("等价于 "),t("code",[v._v("[ \\f\\n\\r\\t\\v]")]),v._v(" 。")])]),v._v(" "),t("tr",[t("td",[t("code",[v._v("\\S")])]),v._v(" "),t("td",[v._v("匹配任何非空白字符。")]),v._v(" "),t("td",[v._v("等价于 "),t("code",[v._v("[^ \\f\\n\\r\\t\\v]")]),v._v(" 。")])]),v._v(" "),t("tr",[t("td",[t("code",[v._v("\\t")])]),v._v(" "),t("td",[v._v("匹配一个制表符。")]),v._v(" "),t("td",[v._v("等价于 "),t("code",[v._v("\\x09")]),v._v(" 和 "),t("code",[v._v("\\cI")]),v._v(" .")])]),v._v(" "),t("tr",[t("td",[t("code",[v._v("\\v")])]),v._v(" "),t("td",[v._v("匹配一个垂直制表符。")]),v._v(" "),t("td",[v._v("等价于 "),t("code",[v._v("\\x0b")]),v._v(" 和 "),t("code",[v._v("\\cK")]),v._v(" .")])]),v._v(" "),t("tr",[t("td",[t("code",[v._v("\\w")])]),v._v(" "),t("td",[v._v("匹配包括下划线的任何单词字符。")]),v._v(" "),t("td",[v._v("等价于 "),t("code",[v._v("[A-Za-z0-9_]")]),v._v(" 。")])]),v._v(" "),t("tr",[t("td",[t("code",[v._v("\\W")])]),v._v(" "),t("td",[v._v("匹配任何非单词字符。")]),v._v(" "),t("td",[v._v("等价于 "),t("code",[v._v("[^A-Za-z0-9_]")]),v._v(" 。")])]),v._v(" "),t("tr",[t("td",[t("code",[v._v("\\xn")])]),v._v(" "),t("td",[v._v("匹配 "),t("code",[v._v("n")]),v._v(" , 其中 "),t("code",[v._v("n")]),v._v(" 为十六进制转义值。 十六进制转义值必须为确定的两个数字长。")]),v._v(" "),t("td",[v._v("例如， "),t("code",[v._v("\\x41")]),v._v(" 匹配 "),t("code",[v._v("A")]),v._v(" 。 "),t("code",[v._v("\\x041")]),v._v(" 则等价于 "),t("code",[v._v("\\x04&1")]),v._v(" 。 正则表达式中可以使用ASCII编码。")])]),v._v(" "),t("tr",[t("td",[t("code",[v._v("\\num")])]),v._v(" "),t("td",[v._v("匹配 "),t("code",[v._v("num")]),v._v(" , 其中 "),t("code",[v._v("num")]),v._v(" 是一个正整数。 对所获取的匹配的引用。")]),v._v(" "),t("td",[v._v("例如， "),t("code",[v._v("(.)\\1")]),v._v(" 匹配两个连续的相同字符。")])]),v._v(" "),t("tr",[t("td",[t("code",[v._v("\\n")])]),v._v(" "),t("td",[v._v("标识一个八进制转义值或一个向后引用。")]),v._v(" "),t("td",[v._v("如果 "),t("code",[v._v("\\n")]),v._v(" 之前至少 "),t("code",[v._v("n")]),v._v(" 个获取的子表达式， 则n为向后引用。 否则， 如果 "),t("code",[v._v("n")]),v._v(" 为八进制数字 "),t("code",[v._v("(0-7)")]),v._v(" ， 则 "),t("code",[v._v("n")]),v._v(" 为一个八进制转义值。")])]),v._v(" "),t("tr",[t("td",[t("code",[v._v("\\nm")])]),v._v(" "),t("td",[v._v("标识一个八进制转义值或一个向后引用。")]),v._v(" "),t("td",[v._v("如果 "),t("code",[v._v("\\nm")]),v._v(" 之前至少有 "),t("code",[v._v("nm")]),v._v(" 个获得子表达式， 则 "),t("code",[v._v("nm")]),v._v(" 为向后引用。 如果 "),t("code",[v._v("\\nm")]),v._v(" 之前至少有 "),t("code",[v._v("n")]),v._v(" 个获取， 则n为一个后跟文字m的向后引用。 如果前面的条件都不满足， 若 "),t("code",[v._v("n")]),v._v(" 和 "),t("code",[v._v("m")]),v._v(" 均为八进制数字 "),t("code",[v._v("(0-7)")]),v._v(" ， 则 "),t("code",[v._v("\\nm")]),v._v(" 将匹配八进制转义值 "),t("code",[v._v("nm")]),v._v(" .")])]),v._v(" "),t("tr",[t("td",[t("code",[v._v("\\nml")])]),v._v(" "),t("td",[v._v("如果 "),t("code",[v._v("n")]),v._v(" 为八进制数字 "),t("code",[v._v("(0-3)")]),v._v(" ， 且 "),t("code",[v._v("m")]),v._v(" 和l均为八进制数字 "),t("code",[v._v("(0-7)")]),v._v(" ， 则匹配八进制转义值 "),t("code",[v._v("nml")]),v._v(" .")]),v._v(" "),t("td")]),v._v(" "),t("tr",[t("td",[t("code",[v._v("\\un")])]),v._v(" "),t("td",[v._v("匹配 "),t("code",[v._v("n")]),v._v(" , 其中n是一个用四个十六进制数字表示的 "),t("code",[v._v("Unicode字符")]),v._v(" 。")]),v._v(" "),t("td",[v._v("例如， "),t("code",[v._v("\\u00A9")]),v._v(" 匹配版权符号 "),t("code",[v._v("(©)")]),v._v(" 。")])])])]),v._v(" "),t("h2",{attrs:{id:"常用的正则表达式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#常用的正则表达式","aria-hidden":"true"}},[v._v("#")]),v._v(" 常用的正则表达式")]),v._v(" "),t("ul",[t("li",[t("p",[t("strong",[v._v("用户名")])]),v._v(" "),t("ul",[t("li",[t("code",[v._v("/^[a-z0-9_-]{3, 16}$/")])])])]),v._v(" "),t("li",[t("p",[t("strong",[v._v("密码")])]),v._v(" "),t("ul",[t("li",[t("code",[v._v("/^[a-z0-9_-]{6, 18}$/")])])])]),v._v(" "),t("li",[t("p",[t("strong",[v._v("十六进制值")])]),v._v(" "),t("ul",[t("li",[t("code",[v._v("/^#?([a-f0-9]{6}|[a-f0-9]{3})$/")])])])]),v._v(" "),t("li",[t("p",[t("strong",[v._v("电子邮箱")])]),v._v(" "),t("ul",[t("li",[t("code",[v._v("/^([a-z0-9_\\.-]+)@([\\da-z\\.-]+)\\.([a-z\\.]{2, 6})$/")])]),v._v(" "),t("li",[t("code",[v._v("/^[a-z\\d]+(\\.[a-z\\d]+)*@([\\da-z](-[\\da-z])?)+(\\.{1, 2}[a-z]+)+$/")])])])]),v._v(" "),t("li",[t("p",[t("strong",[v._v("URL")])]),v._v(" "),t("ul",[t("li",[t("code",[v._v("/^(https?:\\/\\/)?([\\da-z\\.-]+)\\.([a-z\\.]{2, 6})([\\/\\w \\.-]*)*\\/?$/")])])])]),v._v(" "),t("li",[t("p",[t("strong",[v._v("IP 地址")])]),v._v(" "),t("ul",[t("li",[t("code",[v._v("/((2[0-4]\\d|25[0-5]|[01]?\\d\\d?)\\.){3}(2[0-4]\\d|25[0-5]|[01]?\\d\\d?)/")])]),v._v(" "),t("li",[t("code",[v._v("/^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/")])])])]),v._v(" "),t("li",[t("p",[t("strong",[v._v("HTML 标签")])]),v._v(" "),t("ul",[t("li",[t("code",[v._v("/^<([a-z]+)([^<]+)*(?:>(.*)<\\/\\1>|\\s+\\/>)$/")])])])]),v._v(" "),t("li",[t("p",[t("strong",[v._v("删除代码\\注释")])]),v._v(" "),t("ul",[t("li",[t("code",[v._v("(?<!http:|\\S)//.*$")])])])]),v._v(" "),t("li",[t("p",[t("strong",[v._v("Unicode编码中的汉字范围")])]),v._v(" "),t("ul",[t("li",[t("code",[v._v("/^[\\u2E80-\\u9FFF]+$/")])])])])]),v._v(" "),t("h2",{attrs:{id:"参考文档"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#参考文档","aria-hidden":"true"}},[v._v("#")]),v._v(" 参考文档")]),v._v(" "),t("p",[t("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/RegExp",target:"_blank",rel:"noopener noreferrer"}},[v._v("✈️ MDN RegExp构造函数"),t("OutboundLink")],1),v._v(" https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/RegExp")]),v._v(" "),t("p",[t("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions",target:"_blank",rel:"noopener noreferrer"}},[v._v("✈️ MDN正则表达式"),t("OutboundLink")],1),v._v(" https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions")]),v._v(" "),t("p",[t("a",{attrs:{href:"https://www.jianshu.com/p/ed3588b83e7d",target:"_blank",rel:"noopener noreferrer"}},[v._v("✈️ JS正则表达式基本语法 "),t("OutboundLink")],1),v._v(" https://www.jianshu.com/p/ed3588b83e7d")]),v._v(" "),t("p",[t("a",{attrs:{href:"http://tool.oschina.net/uploads/apidocs/jquery/regexp.html",target:"_blank",rel:"noopener noreferrer"}},[v._v("✈️ 表达式全集 "),t("OutboundLink")],1),v._v(" http://tool.oschina.net/uploads/apidocs/jquery/regexp.html")]),v._v(" "),t("p",[t("a",{attrs:{href:"http://www.regexlab.com/zh/regref.htm",target:"_blank",rel:"noopener noreferrer"}},[v._v("✈️ 正则表达式工作室"),t("OutboundLink")],1),v._v(" http://www.regexlab.com/zh/regref.htm")]),v._v(" "),t("p",[t("a",{attrs:{href:"https://www.cnblogs.com/Yimi/p/6668905.html",target:"_blank",rel:"noopener noreferrer"}},[v._v("✈️ 缘琪梦"),t("OutboundLink")],1),v._v(" https://www.cnblogs.com/Yimi/p/6668905.html")]),v._v(" "),t("p",[t("a",{attrs:{href:"XXXXX"}},[v._v("✈️ XXXX")]),v._v(" XXXXX")])])},[],!1,null,null,null);_.default=o.exports}}]);